import numpy as np
from scipy.spatial.transform import Rotation


def solve(A, B):
    K = np.zeros((4, 4))
    len_ = len(A)
    for j in range(len_):
        Ki = Ks(A[j, :, :], B[j, :, :])
    K = K + 1 / len_ * Ki

    print("K", K)
    D, V = np.linalg.eig(K)
    # print("D V", D, V)
    q_proposed = np.array([V[1, 0], V[2, 0], V[3, 0], V[0, 0]])
    print(q_proposed)
    R = Rotation.from_quat(q_proposed).as_matrix()
    return R


def Ks(A, B):
    K11 = np.array([
        [A[0, 0] - B[0, 0], 0, A[0, 2] + B[2, 0], - A[0, 1] - B[1, 0]],
        [0, A[0, 0] - B[0, 0], A[0, 1] - B[1, 0], A[0, 2] - B[2, 0]],
        [A[0, 2] + B[2, 0], A[0, 1] - B[1, 0], B[0, 0] - A[0, 0], 0],
        [- A[0, 1] - B[1, 0], A[0, 2] - B[2, 0], 0, B[0, 0] - A[0, 0]],
    ])

    K22 = np.array([
        [A[1, 1] - B[1, 1], - A[1, 2] - B[2, 1], 0, A[1, 0] + B[0, 1]],
        [- A[1, 2] - B[2, 1], B[1, 1] - A[1, 1], A[1, 0] - B[0, 1], 0],
        [0, A[1, 0] - B[0, 1], A[1, 1] - B[1, 1], A[1, 2] - B[2, 1]],
        [A[1, 0] + B[0, 1], 0, A[1, 2] - B[2, 1], B[1, 1] - A[1, 1]],
    ])

    K33 = np.array([
        [A[2, 2] - B[2, 2], A[2, 1] + B[1, 2], - A[2, 0] - B[0, 2], 0],
        [A[2, 1] + B[1, 2], B[2, 2] - A[2, 2], 0, A[2, 0] - B[0, 2]],
        [- A[2, 0] - B[0, 2], 0, B[2, 2] - A[2, 2], A[2, 1] - B[1, 2]],
        [0, A[2, 0] - B[0, 2], A[2, 1] - B[1, 2], A[2, 2] - B[2, 2]],
    ])
    K12 = np.array([
        [A[1, 0] - B[1, 0], -B[2, 0], A[1, 2], B[0, 0] - A[1, 1]],
        [-B[2, 0], A[1, 0] + B[1, 0], A[1, 1] - B[0, 0], A[1, 2]],
        [A[1, 2], A[1, 1] - B[0, 0], - A[1, 0] - B[1, 0], -B[2, 0]],
        [B[0, 0] - A[1, 1], A[1, 2], -B[2, 0], B[1, 0] - A[1, 0]],
    ])

    K13 = np.array([
        [A[2, 0] - B[2, 0], B[1, 0], A[2, 2] - B[0, 0], -A[2, 1]],
        [B[1, 0], A[2, 0] + B[2, 0], A[2, 1], A[2, 2] - B[0, 0]],
        [A[2, 2] - B[0, 0], A[2, 1], B[2, 0] - A[2, 0], -B[1, 0]],
        [-A[2, 1], A[2, 2] - B[0, 0], -B[1, 0], - A[2, 0] - B[2, 0]],
    ])

    K21 = np.array([
        [A[0, 1] - B[0, 1], -A[0, 2], B[2, 1], A[0, 0] - B[1, 1]],
        [-A[0, 2], - A[0, 1] - B[0, 1], A[0, 0] - B[1, 1], -B[2, 1]],
        [B[2, 1], A[0, 0] - B[1, 1], A[0, 1] + B[0, 1], A[0, 2]],
        [A[0, 0] - B[1, 1], -B[2, 1], A[0, 2], B[0, 1] - A[0, 1]],
    ])

    K23 = np.array([
        [A[2, 1] - B[2, 1], B[1, 1] - A[2, 2], -B[0, 1], A[2, 0]],
        [B[1, 1] - A[2, 2], B[2, 1] - A[2, 1], A[2, 0], -B[0, 1]],
        [-B[0, 1], A[2, 0], A[2, 1] + B[2, 1], A[2, 2] - B[1, 1]],
        [A[2, 0], -B[0, 1], A[2, 2] - B[1, 1], - A[2, 1] - B[2, 1]],
    ])

    K31 = np.array([
        [A[0, 2] - B[0, 2], A[0, 1], B[2, 2] - A[0, 0], -B[1, 2]],
        [A[0, 1], - A[0, 2] - B[0, 2], -B[1, 2], A[0, 0] - B[2, 2]],
        [B[2, 2] - A[0, 0], -B[1, 2], B[0, 2] - A[0, 2], A[0, 1]],
        [-B[1, 2], A[0, 0] - B[2, 2], A[0, 1], A[0, 2] + B[0, 2]],
    ])

    K32 = np.array([
        [A[1, 2] - B[1, 2], A[1, 1] - B[2, 2], -A[1, 0], B[0, 2]],
        [A[1, 1] - B[2, 2], B[1, 2] - A[1, 2], -B[0, 2], A[1, 0]],
        [-A[1, 0], -B[0, 2], - A[1, 2] - B[1, 2], A[1, 1] - B[2, 2]],
        [B[0, 2], A[1, 0], A[1, 1] - B[2, 2], A[1, 2] + B[1, 2]],
    ])

    Ki = K11 @ K11 + K12 @ K12 + K13 @ K13 + K21 @ K21 + \
        K22 @ K22 + K23 @ K23 + K31 @ K31 + K32 @ K32 + K33 @ K33
    return Ki
